***********************************************************************
************************ DATABASE SCHEMA ******************************
***********************************************************************
tags: database Database DATABASE db schema SCHEMA table Table TABLE

The database looks like this,

TABLE_NAME: Profile
FIELD: name, DATA_TYPE: string (text)
FIELD: min_temp, DATA_TYPE: integer
FIELD: max_temp, DATA_TYPE: integer

TABLE_NAME: Sensor
FIELD: id, DATA_TYPE: integer
FIELD: timestamp, DATA_TYPE: timestamp, automatically written

TABLE_NAME: Gui
FIELD: timestamp, DATA_TYPE: timestamp, automatically written
FIELD: current_profile, DATA_TYPE: string (text)
FIELD: change_in_thermostat, DATA_TYPE: string(text)

TABLE_NAME: Airconditioner
FIELD: id, DATA_TYPE: integer
FIELD: timestamp, DATA_TYPE: timestamp, automatically written
FIELD: command, DATA_TYPE: string (text)

TABLE_NAME: TemperatureModel
FIELD: timestamp, DATA_TYPE: timestamp, automatically written
FIELD: airconditioner_command, DATA_TYPE: string (text)

***********************************************************************
***************************** SENSOR **********************************
***********************************************************************
tags: sensor Sensor SENSOR hardware set up setup set-up

For creating individual sensors and linking them up to the database,
first we need to install the hardware library to connect to the
DHT11 sensors for each raspberry pi, steps are below to do so,

NOTE THAT THIS WILL ONLY WORK WITH A LINUX MACHINE!!! (or the raspberrypi os)

to install the Adafruit_DHT library,

pip install Adafruit-DHT or sudo pip3 install Adafruit_DHT

if that doesn't work use this,

sudo apt-get install python3-dev python3-pip
sudo python3 -m pip install --upgrade pip setuptools wheel
sudo pip3 install Adafruit_DHT

Example on how to use this for the hardware side of things,

    from class_sensor import *
    import Adafruit_DHT
    import time

    SENSOR_0 = Sensor(0)
    DHT_SENSOR_0 = Adafruit_DHT.DHT11
    DHT_PIN_0 = 7

    SENSOR_1 = Sensor(1)
    DHT_SENSOR_1 = Adafruit_DHT.DHT11
    DHT_PIN_1 = 4

    SENSOR_2 = Sensor(2)
    DHT_SENSOR_2 = Adafruit_DHT.DHT11
    DHT_PIN_2 = 3

    while True:
        humidity_0, temperature_0 = Adafruit_DHT.read(DHT_SENSOR0, DHT_PIN_0)
        humidity_1, temperature_1 = Adafruit_DHT.read(DHT_SENSOR1, DHT_PIN_1)
        humidity_2, temperature_2 = Adafruit_DHT.read(DHT_SENSOR2, DHT_PIN_2)
        if (humidity_0 is not None and temperature_0 is not None):
            SENSOR_0.setHumidity(humidity_0)
            SENSOR_0.setTemperature(temperature_0)
        if (humidity_1 is not None and temperature_1 is not None):
            SENSOR_1.setHumidity(humidity_1)
            SENSOR_1.setTemperature(temperature_1)
        if (humidity_2 is not None and temperature_2 is not None):
            SENSOR_2.setHumidity(humidity_2)
            SENSOR_2.setTemperature(temperature_2)
    
online information sources used,
https://www.thegeekpub.com/236867/using-the-dht11-temperature-sensor-with-the-raspberry-pi/
https://github.com/adafruit/Adafruit_Python_DHT/tree/master/examples

***********************************************************************
************************ CLIENT HANDLER *******************************
***********************************************************************
tags: server Server SERVER main Main MAIN client handler Client Handler CLIENT HANDLER

Our database server accepts a number of connections, this is a constant
variable that is defined in the beginning of the program.

It will then run a loop for "n" amount of times depending on the amount
of clients we will receive.

As it loops each client is appended to a array, once each client connects
and the array meets the size of the amount of expected clients the program
then begins to iterate through every client.

As it iterates through every client, a "CONTINUE" flag is sent to the current
client in the loop, this prompts the client to start their series of operation.

The client is then expected to send a flag of whether it wants information (READ)
or whether it wants to write information to the database (WRITE)

an example of this process,
    CLIENT:
    client = Client()
    client.connectToServer()

    while True:
        client.waitForContinueFlag(client) ## This function needs to be called first before we send a read/write flag.
        client.sendReadFlag(client)

        data = eval(client.getData()) ## The eval flag allows us to convert a string into a datastructure,
        ## client does stuff here     ## an example being a string tuple structure '(,)'

client then loops back waiting for a continue flag from the server to begin its set
of operations again.

    SERVER:

    AMOUNT_OF_CLIENTS = 3
    database = Database() ## Creates a database object we can use to update or read from our db.
    server = Server() ## Creates a server object, note that the server needs to be run first.

    connected_clients = []
    for connected_client in range(AMOUNT_OF_CLIENTS):
        client, client_address = server.acceptClient() ## Server accepts clients in a range of the amount of clients possible
        connected_clients.append(client)

    while True:
        for connected_client in connected_clients: ## choosing a client off the list we just made from index 0
            server.SendData(connected_client, "CONTINUE") ## This prompts the first client to give us a flag.
            client_flag = server.getData(connected_client)
            if client_flag == "WRITE":
                server.sendData(connected_client, "CONTINUE")
                client_data = server.getData(connected_client)
                database.writeToDatabase(client_data)
            elif client_flag == "READ":
                server.sendData(connected_client, "CONTINUE")
                client_data = server.getData(connected_client)
                database_data = database.getFromDatabase(client_data)
                server.sendData(connected_client, database_data)
                
                database_data = ''
            ## Resets the data.
            client_data = ''
            client_flag = ''
